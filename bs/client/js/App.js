// Generated by CoffeeScript 1.9.3
var App, init_socket,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

init_socket = function(socket, scene) {
  socket.in_connection = false;
  socket.game_scene = scene;
  socket.on('welcom', (function(data) {
    socket.in_connection = true;
    socket.game_scene.user.id = data.id;
    return socket.game_scene.users[data.id] = socket.game_scene.users[-1];
  }));
  socket.on('update', (function(data) {
    var newpalyer, player;
    newpalyer = false;
    scene = socket.game_scene;
    if (!scene.users[data.id]) {
      newpalyer = true;
      scene.users[data.id] = new Player(data.id);
      scene.arrows[data.id] = new Arrow(scene.users[data.id], scene.camera);
    }
    player = scene.users[data.id];
    player.name = data.name;
    if (player.id === scene.user.id) {
      return;
    }
    if (newpalyer) {
      player.x = data.x;
      player.y = data.y;
    } else {
      player.target_x = data.x;
      player.target_y = data.y;
    }
    player.angle = data.angle;
    return player.momentum = data.momentum;
  }));
  socket.on('userclose', (function(data) {
    if (socket.game_scene.users[data.id]) {
      delete socket.game_scene[data.id];
      return delete socket.arrows[data.id];
    }
  }));
  return socket.on('disconnect', (function() {
    return socket.in_connection = false;
  }));
};

App = (function() {
  function App(canvas, bullet_canvas) {
    var i, j;
    this.canvas = canvas;
    this.bullet_canvas = bullet_canvas;
    this.set_maxmometum = bind(this.set_maxmometum, this);
    this.resizeCvs = bind(this.resizeCvs, this);
    this.getMouseWorldPosition = bind(this.getMouseWorldPosition, this);
    this.resize = bind(this.resize, this);
    this.touchmove = bind(this.touchmove, this);
    this.touchend = bind(this.touchend, this);
    this.touchstart = bind(this.touchstart, this);
    this.keyup = bind(this.keyup, this);
    this.keydown = bind(this.keydown, this);
    this.mousemove = bind(this.mousemove, this);
    this.mouseup = bind(this.mouseup, this);
    this.mousedown = bind(this.mousedown, this);
    this.draw = bind(this.draw, this);
    this.update = bind(this.update, this);
    this.context = this.canvas.getContext('2d');
    this.bullet_context = this.bullet_canvas.getContext('2d');
    this.resizeCvs();
    this.scene = new Scene();
    this.scene.user = new Player(-1);
    this.scene.users[-1] = this.scene.user;
    for (i = j = 1; j <= 150; i = ++j) {
      this.scene.rocks.push(new Rock());
    }
    this.scene.camera = new Camera(this.canvas, this.context, this.scene.user.x, this.scene.user.y);
    this.scene.arrows = {};
    this.socket = io();
    init_socket(this.socket, this.scene);
    this.mouse = {
      x: 0,
      y: 0,
      worldx: 0,
      worldy: 0,
      player: null
    };
    this.key_nav = {
      x: 0,
      y: 0
    };
  }

  App.prototype.update = function() {
    var arrow, i, id, j, len, mouse_p, player, ref, ref1, ref2, results, rock;
    if (this.key_nav.x !== 0 || this.key_nav.y !== 0) {
      this.scene.user.userUpdate(this.scene.user.x + this.key_nav.x, this.scene.user.y + this.key_nav.y);
    } else {
      mouse_p = this.getMouseWorldPosition();
      this.mouse.worldx = mouse_p.x;
      this.mouse.worldy = mouse_p.y;
      this.scene.user.userUpdate(this.mouse.worldx, this.mouse.worldy);
    }
    if (this.scene.user.age % 6 === 0 && this.scene.user.changed > 1 && this.socket.in_connection) {
      this.scene.user.changed = 0;
      sendUpdate(this.scene.user);
    }
    this.scene.camera.update(this.scene);
    ref = this.scene.users;
    for (id in ref) {
      player = ref[id];
      player.update(this.mouse);
    }
    ref1 = this.scene.rocks;
    for (j = 0, len = ref1.length; j < len; j++) {
      rock = ref1[j];
      rock.update(this.scene.camera.getOuterBounds(), this.scene.camera.zoom);
    }
    ref2 = this.scene.arrows;
    results = [];
    for (i in ref2) {
      arrow = ref2[i];
      results.push(arrow.update());
    }
    return results;
  };

  App.prototype.draw = function() {
    var arrow, i, j, len, ref, ref1, ref2, results, rock, user;
    this.scene.camera.setupContext();
    this.bullet_context.bgcolor__ = this.scene.camera.bgcolor;
    ref = this.scene.rocks;
    for (j = 0, len = ref.length; j < len; j++) {
      rock = ref[j];
      rock.draw(this.context);
    }
    ref1 = this.scene.users;
    for (i in ref1) {
      user = ref1[i];
      user.draw(this.context, this.scene.camera.getOuterBounds(), this.context);
    }
    this.scene.camera.startUILayer();
    ref2 = this.scene.arrows;
    results = [];
    for (i in ref2) {
      arrow = ref2[i];
      results.push(arrow.draw(this.context, this.canvas));
    }
    return results;
  };

  App.prototype.mousedown = function(e) {
    this.mouse.clicking = true;
    if (this.mouse.player && this.mouse.player.hover && this.mouse.player.onclick(e)) {
      return;
    }
    if (this.scene.user && e.which === 1) {
      return this.scene.user.momentum = this.scene.user.target_momentum = this.scene.user.max_momentum;
    }
  };

  App.prototype.mouseup = function(e) {
    if (this.scene.user && e.which === 1) {
      return this.scene.user.target_momentum = 0;
    }
  };

  App.prototype.mousemove = function(e) {
    this.mouse.x = e.clientX;
    return this.mouse.y = e.clientY;
  };

  App.prototype.keydown = function(e) {
    switch (e.keyCode) {
      case keys.up:
        this.key_nav.y = -1;
        this.set_maxmometum(this.scene.user);
        break;
      case keys.down:
        this.key_nav.y = 1;
        this.set_maxmometum(this.scene.user);
        break;
      case keys.left:
        this.key_nav.x = -1;
        this.set_maxmometum(this.scene.user);
        break;
      case keys.right:
        this.key_nav.x = 1;
        this.set_maxmometum(this.scene.user);
        break;
      case keys.space:
        this.scene.user.shoot();
        break;
      default:
        console.log('keydown error!');
    }
    return e.preventDefault();
  };

  App.prototype.keyup = function(e) {
    switch (e.keyCode) {
      case keys.up:
      case keys.down:
        this.key_nav.y = 0;
        break;
      case keys.left:
      case keys.right:
        this.key_nav.x = 0;
    }
    if (this.key_nav.x === 0 && this.key_nav.y === 0) {
      this.scene.user.target_momentum = 0;
    }
    return e.preventDefault();
  };

  App.prototype.touchstart = function(e) {};

  App.prototype.touchend = function(e) {};

  App.prototype.touchmove = function(e) {};

  App.prototype.resize = function(e) {
    return this.resizeCvs();
  };

  App.prototype.getMouseWorldPosition = function() {
    var res;
    return res = {
      x: (this.mouse.x + (this.scene.camera.x * this.scene.camera.zoom - this.canvas.width / 2)) / this.scene.camera.zoom,
      y: (this.mouse.y + (this.scene.camera.y * this.scene.camera.zoom - this.canvas.height / 2)) / this.scene.camera.zoom
    };
  };

  App.prototype.resizeCvs = function() {
    this.canvas.width = window.innerWidth;
    this.canvas.height = window.innerHeight;
    this.bullet_canvas.width = window.innerWidth;
    return this.bullet_canvas.height = window.innerHeight;
  };

  App.prototype.set_maxmometum = function(p) {
    return p.momentum = p.target_momentum = p.max_momentum;
  };

  return App;

})();
